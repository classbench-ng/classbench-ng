#!/usr/bin/env ruby

require_relative "lib/classbench"

require "pp"
require "docopt"
doc = <<DOCOPT
ClassBench-ng
  A tool for generation of synthetic classification rule sets for benchmarking.

Usage:
  #{__FILE__} analyse tuples FILE FORMAT [-l]
  #{__FILE__} analyse of FILE
  #{__FILE__} generate v4 SEED [--count=<n>] [(updates PER_U PER_S ADD_U ADD_S REM_U REM_S TMAX)] [--db-generator=<path>]
  #{__FILE__} generate v6 SEED [--count=<n>] [(updates PER_U PER_S ADD_U ADD_S REM_U REM_S TMAX)] [--db-generator=<path>]
  #{__FILE__} generate of SEED [--count=<n>] [(updates PER_U PER_S ADD_U ADD_S REM_U REM_S TMAX)] [--db-generator=<path>]
  #{__FILE__} -h | --help

Options:
  -l                        Enable printing analysis error logs.
  --db-generator=<path>     Path to an original ClassBench binary.
                            [default: ./vendor/db_generator/db_generator]
  --count=<n>               The number of rules to be generated.
                            [default: 100]
  -h --help                 Show this screen.

Analyser accepts as an input either a rule set in a given format in case of
"analyse tuples" (the expected structure of a format file is described in
lib/tuples_analyzer/README, section 7) or an ovs-ofctl dump in case of
"analyse of".
The output is an original ClassBench seed or this seed with an OpenFlow YAML
structure as the last section, respectively.

Generator accepts as an input an original ClassBench seed that has to contain
an OpenFlow section in case of "generate of".
The output is either the same as of original ClassBench outputs or it consists
of "attribute=value" pairs joined by ", ".

Generator can also optionally produce rule set updates with period between
updates in seconds, number of added rules per update, and number of removed
rules per update sampled from independent normal distributions specified by
their mean value (*_U) and standard deviation (*_S). The generated update
sequence starts in time 0 and it is limited by the specified maximum time of
the last update.
Generated updates (i.e., rules to be added and rules to be removed) together
with updated rule sets are stored in directory "updates", while the output of
the generator shows an update plan.

DOCOPT
# Add the following line to the DOCOPT's "Options" pattern to show support of
# "version" parameter.
#  #{__FILE__} version

begin
	opts = Docopt::docopt(doc)
	if opts["analyse"]
		if opts["tuples"]
			Classbench::analyse_tuples(opts["FILE"], opts["FORMAT"], opts["-l"])
		elsif opts["of"]
			Classbench::analyse_of(opts["FILE"])
		end
	elsif opts["generate"]
		period = { "mean" => opts["PER_U"].to_f, "std" => opts["PER_S"].to_f }
		add =    { "mean" => opts["ADD_U"].to_f, "std" => opts["ADD_S"].to_f }
		rem =    { "mean" => opts["REM_U"].to_f, "std" => opts["REM_S"].to_f }
		if opts["v4"]
			Classbench::generate("v4", opts["SEED"], (opts["--count"].to_i), opts["updates"], period, add, rem, opts["TMAX"].to_f, opts["--db-generator"])
		elsif opts["v6"]
			Classbench::generate("v6", opts["SEED"], (opts["--count"].to_i), opts["updates"], period, add, rem, opts["TMAX"].to_f, opts["--db-generator"])
		elsif opts["of"]
			Classbench::generate("of", opts["SEED"], (opts["--count"].to_i), opts["updates"], period, add, rem, opts["TMAX"].to_f, opts["--db-generator"])
		end
	elsif opts["version"]
		puts "Version: #{Classbench::VERSION}"
	end

	rescue Docopt::Exit => e
		STDERR.puts e.message
end
